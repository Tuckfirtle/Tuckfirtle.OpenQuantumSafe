name: Build and Deploy Open Quantum Safe

on:
  push:
    tags:
      - "*"

  workflow_dispatch:

env:
  VCPKG_BINARY_SOURCES: clear;nuget,GitHub,readwrite;files,${{ github.workspace }}/vcpkg/vcpkg_installed,readwrite
  CMAKE_TOOLCHAIN_FILE: vcpkg/scripts/buildsystems/vcpkg.cmake
  CMAKE_SOURCE_ROOT: liboqs
  CMAKE_BUILD_ROOT: build

defaults:
  run:
    shell: pwsh

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_liboqs:
    name: Build liboqs (${{ matrix.liboqs.cmake_install_prefix }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true
      matrix:
        os: [windows-2022, ubuntu-latest, macos-latest]
        arch: [x64, x86, arm, arm64]
        exclude:
          - os: ubuntu-latest
            arch: x86
          - os: macos-latest
            arch: x86
          - os: macos-latest
            arch: arm
          - os: macos-latest
            arch: arm64
        include:
          - os: windows-2022
            arch: x64
            install:
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: x64-mingw-static
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/win-x64/native
              use_msvc: false
              msvc_environment: vcvars64
              use_msys2: true
              msys2_environment: MINGW64
              msys2_install: >-
                mingw-w64-x86_64-toolchain
                mingw-w64-x86_64-cmake
                mingw-w64-x86_64-ninja
              use_gcc: false
              gcc_cc: ""
              gcc_cxx: ""

          - os: windows-2022
            arch: x86
            install:
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: x86-mingw-static
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/win-x86/native
              use_msvc: false
              msvc_environment: vcvars32
              use_msys2: true
              msys2_environment: MINGW32
              msys2_install: >-
                mingw-w64-i686-toolchain
                mingw-w64-i686-cmake
                mingw-w64-i686-ninja
              use_gcc: false
              gcc_cc: ""
              gcc_cxx: ""

          - os: windows-2022
            arch: arm
            install:
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: arm-windows-static
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/win-arm/native
              use_msvc: true
              msvc_environment: vcvarsamd64_arm
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: false
              gcc_cc: ""
              gcc_cxx: ""

          - os: windows-2022
            arch: arm64
            install:
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: arm64-windows-static
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/win-arm64/native
              use_msvc: true
              msvc_environment: vcvarsamd64_arm64
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: false
              gcc_cc: ""
              gcc_cxx: ""

          - os: ubuntu-latest
            arch: x64
            install:
              - sudo apt-get update -y
              - sudo apt-get install curl zip unzip tar p7zip-full cmake ninja-build build-essential pkg-config gcc-10 g++-10 -y
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: x64-linux
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/linux-x64/native
              use_msvc: false
              msvc_environment: ""
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: true
              gcc_cc: gcc-10
              gcc_cxx: g++-10

          - os: ubuntu-latest
            arch: arm
            install:
              - sudo apt-get update -y
              - sudo apt-get install curl zip unzip tar p7zip-full cmake ninja-build build-essential pkg-config gcc-10-arm-linux-gnueabihf g++-10-arm-linux-gnueabihf -y
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: arm-linux
              cmake_toolchain_file: cmake/raspberrypi-arm.cmake
              cmake_install_prefix: runtimes/linux-arm/native
              use_msvc: false
              msvc_environment: ""
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: true
              gcc_cc: gcc-10
              gcc_cxx: g++-10

          - os: ubuntu-latest
            arch: arm64
            install:
              - sudo apt-get update -y
              - sudo apt-get install curl zip unzip tar p7zip-full cmake ninja-build build-essential pkg-config gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu -y
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: arm64-linux
              cmake_toolchain_file: cmake/raspberrypi-arm64.cmake
              cmake_install_prefix: runtimes/linux-arm64/native
              use_msvc: false
              msvc_environment: ""
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: true
              gcc_cc: gcc-10
              gcc_cxx: g++-10

          - os: macos-latest
            arch: x64
            install:
              - brew update
              - brew install ninja
              - Move-Item -Path "${{ github.workspace }}/vcpkg.json" -Destination "${{ github.workspace }}/liboqs"
            liboqs:
              cmake_generator: Ninja
              cmake_build_type: Release
              cmake_target_triplet: x64-osx
              cmake_toolchain_file: ""
              cmake_install_prefix: runtimes/osx-x64/native
              use_msvc: false
              msvc_environment: ""
              use_msys2: false
              msys2_environment: ""
              msys2_install: ""
              use_gcc: true
              gcc_cc: gcc-10
              gcc_cxx: g++-10

    steps:
      # Init
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          setupOnly: true
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          appendedCacheKey: ${{ matrix.output_folder }}
          additionalCachedPaths: ${{ github.workspace }}/vcpkg/vcpkg_installed

      - name: Setup NuGet Credentials
        run: |
          $vcpkg_executable = Join-Path "${{ github.workspace }}" 'vcpkg/vcpkg'
          $mono = "${{ runner.os }}" -eq 'Windows' ? '' : 'mono'

          $nuget_executable = @(Invoke-Expression "$vcpkg_executable fetch nuget") | Select-Object -Last 1
          Invoke-Expression "$mono $nuget_executable sources add -source `"https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json`" -storepasswordincleartext -name `"GitHub`" -username `"${{ github.repository_owner }}`" -password `"${{ secrets.GITHUB_TOKEN }}`""

      # Install
      - name: Install Program / Dependencies
        run: |
          if (![string]::IsNullOrWhiteSpace("${{ join(matrix.install, ' && ') }}"))
          {
            Invoke-Expression "${{ join(matrix.install, ' && ') }}"
          }

      - name: Setup msys2 environemnt
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows' && matrix.liboqs.use_msys2
        with:
          update: true
          install: ${{ matrix.liboqs.msys2_install }}

      # Build liboqs
      - name: Build liboqs
        run: |
          $cmake_source_root = Join-Path "${{ github.workspace }}" "${{ env.CMAKE_SOURCE_ROOT }}"
          $cmake_build_root = Join-Path "${{ github.workspace }}" "${{ env.CMAKE_BUILD_ROOT }}"

          $cmake_toolchain_file = Join-Path "${{ github.workspace }}" "${{ env.CMAKE_TOOLCHAIN_FILE }}"
          $cmake_chainload_toolchain_file = Join-Path "${{ github.workspace }}" "${{ matrix.liboqs.cmake_toolchain_file }}"
          $cmake_install_prefix = Join-Path "${{ github.workspace }}" "${{ matrix.liboqs.cmake_install_prefix }}"

          if ("${{ runner.os }}" -eq 'Windows')
          {
            $cmake_source_root = $cmake_source_root.Replace('\', '/')
            $cmake_build_root = $cmake_build_root.Replace('\', '/')

            $cmake_toolchain_file = $cmake_toolchain_file.Replace('\', '/')
            $cmake_chainload_toolchain_file = $cmake_chainload_toolchain_file.Replace('\', '/')
            $cmake_install_prefix = $cmake_install_prefix.Replace('\', '/')

            if ("${{ matrix.liboqs.use_msvc }}" -eq 'true')
            {
              $msbuild_install_root = Join-Path "$cmake_build_root" 'INSTALL.vcxproj'
              cmd /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\${{ matrix.liboqs.msvc_environment }}.bat`" && cmake -G `"${{ matrix.liboqs.cmake_generator }}`" -DCMAKE_BUILD_TYPE=`"${{ matrix.liboqs.cmake_build_type }}`" -DCMAKE_TOOLCHAIN_FILE=`"$cmake_toolchain_file`" -DVCPKG_TARGET_TRIPLET=`"${{ matrix.liboqs.cmake_target_triplet }}`" -DCMAKE_INSTALL_PREFIX=`"$cmake_install_prefix`" -DBUILD_SHARED_LIBS=`"ON`" -DOQS_BUILD_ONLY_LIB=`"ON`" -DOQS_DIST_BUILD=`"ON`" -DOQS_USE_OPENSSL=`"ON`" -S `"$cmake_source_root`" -B `"$cmake_build_root`" && ninja -C `"$cmake_build_root`" install"
            }
            elseif ("${{ matrix.liboqs.use_msys2 }}" -eq 'true')
            {
              $env:MSYSTEM = "${{ matrix.liboqs.msys2_environment }}"

              msys2 -c "cmake -G `"${{ matrix.liboqs.cmake_generator }}`" -DCMAKE_BUILD_TYPE=`"${{ matrix.liboqs.cmake_build_type}}`" -DCMAKE_TOOLCHAIN_FILE=`"$cmake_toolchain_file`" -DVCPKG_TARGET_TRIPLET=`"${{ matrix.liboqs.cmake_target_triplet}}`" -DCMAKE_INSTALL_PREFIX=`"$cmake_install_prefix`" -DBUILD_SHARED_LIBS=`"ON`" -DOQS_BUILD_ONLY_LIB=`"ON`" -DOQS_DIST_BUILD=`"ON`" -DOQS_USE_OPENSSL=`"ON`" -S `"$cmake_source_root`" -B `"$cmake_build_root`""
              msys2 -c "ninja -C `"$cmake_build_root`" install"
            }
          }
          else
          {
            if (![string]::IsNullOrWhiteSpace("${{ matrix.liboqs.cmake_toolchain_file }}"))
            {
              cmake -G "${{ matrix.liboqs.cmake_generator }}" -DCMAKE_BUILD_TYPE="${{ matrix.liboqs.cmake_build_type}}" -DCMAKE_TOOLCHAIN_FILE="$cmake_toolchain_file" -DVCPKG_TARGET_TRIPLET="${{ matrix.liboqs.cmake_target_triplet}}" -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="$cmake_chainload_toolchain_file" -DCMAKE_INSTALL_PREFIX="$cmake_install_prefix" -DBUILD_SHARED_LIBS=`"ON`" -DOQS_BUILD_ONLY_LIB=`"ON`" -DOQS_DIST_BUILD=`"ON`" -DOQS_USE_OPENSSL=`"ON`" -S "$cmake_source_root" -B "$cmake_build_root"
            }
            else
            {
              $env:CC = "${{ matrix.liboqs.gcc_cc }}"
              $env:CXX = "${{ matrix.liboqs.gcc_cxx }}"

              cmake -G "${{ matrix.liboqs.cmake_generator }}" -DCMAKE_BUILD_TYPE="${{ matrix.liboqs.cmake_build_type}}" -DCMAKE_TOOLCHAIN_FILE="$cmake_toolchain_file" -DVCPKG_TARGET_TRIPLET="${{ matrix.liboqs.cmake_target_triplet}}" -DCMAKE_INSTALL_PREFIX="$cmake_install_prefix" -DBUILD_SHARED_LIBS=`"ON`" -DOQS_BUILD_ONLY_LIB=`"ON`" -DOQS_DIST_BUILD=`"ON`" -DOQS_USE_OPENSSL=`"ON`" -S "$cmake_source_root" -B "$cmake_build_root"
            }

            ninja -C "$cmake_build_root" install
          }

      # Package
      - name: Package liboqs
        run: |
          $publish_root = Join-Path "${{ github.workspace }}" '${{ matrix.liboqs.cmake_install_prefix }}'
          Set-Location "$publish_root"

          if ("${{ runner.os }}" -eq 'Windows')
          {
            Invoke-Expression "7z a -mx=9 `"${{ matrix.liboqs.cmake_target_triplet }}.zip`" ."
          }
          else
          {
            Invoke-Expression "7z a `"${{ matrix.liboqs.cmake_target_triplet }}.tar`" ."
            Invoke-Expression "7z a -sdel -mx=9 `"${{ matrix.liboqs.cmake_target_triplet }}.tar.gz`" `"${{ matrix.liboqs.cmake_target_triplet }}.tar`""
          }

      # Upload Artifacts
      - name: Upload Xirorig artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.liboqs.cmake_target_triplet }}
          path: |
            ${{ github.workspace }}/${{ matrix.liboqs.cmake_install_prefix }}/*.*
            !${{ github.workspace }}/${{ matrix.liboqs.cmake_install_prefix }}/*.tar
